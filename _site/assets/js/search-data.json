{
  "0": {
    "id": "0",
    "title": "Home",
    "content": "More coming soon!",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  },
  "1": {
    "id": "1",
    "title": "Scripting in Blender-2.8",
    "content": "Scripting in Blender-2.8 Getting started The bpy module The mathutils module Adding a UV sphere to a scene Creating materials and assigning them to meshes Further reading on Python API for Blender Building an addon Making addons installable Getting started Open a new, default Blender document. Change the Timeline window to a Python Console. You might want to increase the height so you can see more lines at once. Start out by typing: list(bpy.data.objects) You should see the three default objects listed: [bpy.data.objects[&#39;Camera&#39;], bpy.data.objects[&#39;Cube&#39;], bpy.data.objects[&#39;Light&#39;]] Now, let’s reference the default cube for convenience: cube = bpy.data.objects[&quot;Cube&quot;] Next, we’re going to move the cube, but first we need to import the mathutils module: import mathutils Now we can move the default cube: cube.delta_location += mathutils.Vector((1, 1, 1)) Keep moving the cube along this trajectory by pressing the [UP] arrow and then pressing [ENTER]. Repeat. Congratulations, you’ve just started scripting in Blender! The bpy module The bpy module consists of several submodules: Submodule Description bpy.data contents of the current document. bpy.types info on types of objects in bpy.data. bpy.ops operations perform the actual functions of Blender. bpy.context settings such as currect 3D mode, selected objects, etc. bpy.props functions for defining properties. The mathutils module The mathutils module contains many usesful classes: Class Description Vector representation of 2D or 3D coordinates. Matrix general way of representing a linear transformation. Euler way of representing rotations as a set of Euler angles. Quaternion another way of representing rotations. Color representation of RGB colors and conversion to/from HSV. Adding a UV sphere to a scene Clicking the Scripting tab opens a text editor where we can write and execute code. Try copying and pasting the following script: import bpy import bmesh # Delete all existing objects bpy.ops.object.select_all(action=&#39;SELECT&#39;) bpy.ops.object.delete(use_global=False) # Create an empty mesh and the object mesh = bpy.data.meshes.new(&quot;Ball&quot;) ball = bpy.data.objects.new(&quot;Ball&quot;, mesh) # Add object to scene and select it bpy.context.collection.objects.link(ball) ball.select_set(state=True) # Construct the UV sphere and assign it to the Blender mesh bm = bmesh.new() bmesh.ops.create_uvsphere(bm, u_segments=24, v_segments=24, diameter=3) bm.to_mesh(mesh) bm.free() Then click Run Script. You’ll see the three default objects disappear, replaced by a UV sphere called “Ball”. With the object still selected, we can reposition the Ball object as follows: bpy.ops.transform.translate(value=(x, y, z)) Where x, y, and z correspond to the coordinates in Euclidean space. If we want to use smooth shading (again with the object still selected) we can add: bpy.ops.object.shade_smooth() Let’s modify our script so that we create 50 balls randomly positioned within a 25 by 25 by 25 unit cubic space: from random import randint import bpy import bmesh def add_ball(x, y, z): mesh = bpy.data.meshes.new(&quot;Ball&quot;) ball = bpy.data.objects.new(&quot;Ball&quot;, mesh) bpy.context.collection.objects.link(ball) ball.select_set(state=True) bm = bmesh.new() bmesh.ops.create_uvsphere(bm, u_segments=12, v_segments=12, diameter=1) bm.to_mesh(mesh) bm.free() # Reposition the ball bpy.ops.transform.translate(value=(x, y, z)) # Apply smooth shading bpy.ops.object.shade_smooth() # Deselect the ball ball.select_set(state=False) # Clear the scene bpy.ops.object.select_all(action=&#39;SELECT&#39;) bpy.ops.object.delete(use_global=False) # Add 50 balls at random positions within a 25 by 25 by 25 unit cubic space for i in range(50): add_ball(randint(1, 25), randint(1, 25), randint(1, 25)) Creating materials and assigning them to meshes To create a new material, called Blue, use the following syntax: bpy.data.materials.new(&quot;Blue&quot;) If we want to make Blue reflect its name: bpy.data.materials[&quot;Blue&quot;].diffuse_color = (0, 0, 1, 1) Say we have an object, obj, and we want to apply to it material Blue: obj.data.materials.append(bpy.data.materials[&quot;Blue&quot;]) Let’s try this in an example! The script below creates three cubes: Cube1, Cube2, and Cube3, each with their own materials: Color1, Color2, Color3, respectively: from random import random import bpy import bmesh def create_and_apply_material(obj, tag): material_name = &quot;Color{}&quot;.format(tag) m = bpy.data.materials.new(material_name) m.diffuse_color = (random(), random(), random(), 1) obj.data.materials.append(bpy.data.materials[material_name]) def add_cube(x, y, z, tag): mesh_name = &quot;Cube{}&quot;.format(tag) mesh = bpy.data.meshes.new(mesh_name) cube = bpy.data.objects.new(mesh_name, mesh) bpy.context.collection.objects.link(cube) cube.select_set(state=True) bm = bmesh.new() bmesh.ops.create_cube(bm) bm.to_mesh(mesh) bm.free() # Resize the mesh bpy.ops.transform.resize(value=(2, 2, 2)) # Reposition the cube bpy.ops.transform.translate(value=(x, y, z)) # Call create_and_apply_material create_and_apply_material(cube, tag) # Deselect the ball cube.select_set(state=False) # Clear the scene bpy.ops.object.select_all(action=&#39;SELECT&#39;) bpy.ops.object.delete(use_global=False) # Add 3 cubes with randomly-colored materials for i in range(3): add_cube(i * 2, i * 2, i * 2, i) Further reading on Python API for Blender To learn more about the Python API for Blender, please see the this link. Note: this hasn’t been updated for Blender-2.8 so if you have specific questions, feel free to e-mail me at a.r.kaija@gmail.com and I’ll try to help! Building an addon Addons are Python scripts that extend Blender’s functionality. They can reside in two places: A file within the Blender user preferences directory: in this case the addon needs to be enabled in each Blender document where it is to be used, by ticking its checkbox in the Add-Ons list in the User Preferences window. A text block within the Blender document: in this case the script can be run by clicking Run Script in the Text Editor window, or by ticking the Register checkbox in the Text Editor window. Typically, an addon script defines one or more new operators, as a subclass of the bpy.types.Operator class. Your class must be given a unique name within the document. An operator must have a bl_idname attribute, giving the operator a name, and a bl_label, giving it a user-visible name in the F3 menu. The bl_idname has the following format, for example for the built-in operator to add a cube: mesh.primitive_cube_add Where the part to the left of the single dot is a valid name for a category of operators, which can be found by entering the following in the Python console: dir(bpy.ops) Now we’ll demonstrate how to define an operator that adds a new tetrahedron object to the scene. Our class definition might look something like this: class AddTetrahedron(bpy.types.Operator): bl_idname = &quot;mesh.add_tetrahedron&quot; bl_label = &quot;Add Tetrahedron&quot; The class must define an invoke method like this: def invoke(self, context, event): Where the invoke method carries out the actual function of the operator. After it finishes, it must return a set of strings, telling Blender that the operation has finished. We’ll end our invoke method like this: return {&quot;FINISHED&quot;} We won’t get into explaining the details about how the geometry works, but first we use the mathutils module to define the vertices of our mesh: vertices = [Vector((0, -1 / sqrt(3), 0)), Vector((0.5, 1 / (2 * sqrt(3)), 0)), Vector((-0.5, 1 / (2 * sqrt(3)), 0)), Vector((0, 0, sqrt(2 / 3))),] Then we create a mesh: new_mesh = bpy.data.meshes.new(&quot;Tetrahedron&quot;) Then fill the mesh with the vertices definitions and resulting faces: new_mesh.from_pydata(vertices, [], [[0, 1, 2], [0, 1, 3], [1, 2, 3], [2, 0, 3]]) Where mesh.from_pydata takes three arguments: A list of Vectors defining the vertices. A list of edge definitions. A list of face definitions. Edges or faces are defined as lists of vertex indices - in this example we have four faces, each defined by three vertices. You can either pass the edge definitions or the face definitions, but not both. This is why we’ve passed an empty list for the edge definitions. Since we’ve changed the mesh we need to update it: new_mesh.update And create and object and link it to the scene as we did in our previous examples. Putting everything together: from math import sqrt from mathutils import Vector import bpy class AddTetrahedron(bpy.types.Operator): bl_idname = &quot;mesh.add_tetrahedron&quot; bl_label = &quot;Add Tetrahedron&quot; def invoke(self, context, event): vertices = [Vector((0, -1 / sqrt(3), 0)), Vector((0.5, 1 / (2 * sqrt(3)), 0)), Vector((-0.5, 1 / (2 * sqrt(3)), 0)), Vector((0, 0, sqrt(2 / 3))),] new_mesh = bpy.data.meshes.new(&quot;Tetrahedron&quot;) new_mesh.from_pydata(vertices, [], [[0, 1, 2], [0, 1, 3], [1, 2, 3], [2, 0, 3]]) new_mesh.update() new_object = bpy.data.objects.new(&quot;Tetrahedron&quot;, new_mesh) bpy.context.collection.objects.link(new_object) return {&quot;FINISHED&quot;} bpy.utils.register_class(AddTetrahedron) The call to register_class adds the operator to Blender’s built-in collection. Try copying the code above in to the Blender text editor and clicking Run Script. Then press F3 to search for the addon, typing “tetra” - the Add Tetrahedron addon should appear, congratulations! Making addons installable To make an addon installable, first we need to define a global called bl_info, a Python dictionary. Make sure to enter &quot;blender&quot; : (2, 80, 0)! Here’s an example: bl_info = {&quot;name&quot; : &quot;Add Tetrahedron&quot;, &quot;author&quot; : &quot;John Doe &lt;john.doe@example.com&gt;&quot;, &quot;location&quot; : &quot;View3D &gt; Add &gt; Mesh &gt; Generate&quot;, &quot;version&quot; : (1, 0, 0), &quot;blender&quot; : (2, 80, 0), &quot;description&quot; : &quot;Add a tetrahedron mesh&quot;, &quot;category&quot; : &quot;Add Mesh&quot;,} Then, we need to reformat our call to bpy.utils.register_class as follows: classes = (AddTetrahedron,) def register(): for cls in classes: bpy.utils.register_class(cls) def unregister(): for cls in reversed(classes): bpy.utils.unregister_class(cls) Putting it all together: bl_info = {&quot;name&quot; : &quot;Add Tetrahedron&quot;, &quot;author&quot; : &quot;John Doe &lt;john.doe@example.com&gt;&quot;, &quot;location&quot; : &quot;View3D &gt; Add &gt; Mesh &gt; Generate&quot;, &quot;version&quot; : (1, 0, 0), &quot;blender&quot; : (2, 80, 0), &quot;description&quot; : &quot;Add a tetrahedron mesh&quot;, &quot;category&quot; : &quot;Add Mesh&quot;,} from math import sqrt from mathutils import Vector import bpy class AddTetrahedron(bpy.types.Operator): bl_idname = &quot;mesh.add_tetrahedron&quot; bl_label = &quot;Add Tetrahedron&quot; def invoke(self, context, event): vertices = [Vector((0, -1 / sqrt(3), 0)), Vector((0.5, 1 / (2 * sqrt(3)), 0)), Vector((-0.5, 1 / (2 * sqrt(3)), 0)), Vector((0, 0, sqrt(2 / 3))),] new_mesh = bpy.data.meshes.new(&quot;Tetrahedron&quot;) new_mesh.from_pydata(vertices, [], [[0, 1, 2], [0, 1, 3], [1, 2, 3], [2, 0, 3]]) new_mesh.update() new_object = bpy.data.objects.new(&quot;Tetrahedron&quot;, new_mesh) bpy.context.collection.objects.link(new_object) return {&quot;FINISHED&quot;} classes = (AddTetrahedron,) def register(): for cls in classes: bpy.utils.register_class(cls) def unregister(): for cls in reversed(classes): bpy.utils.unregister_class(cls) Try saving the code above into a .py file, then install the addon: Open Blender. Click Edit &gt; Preferences. Click the Add-ons tab. Click Install… and then select the file you saved earlier. Enable the addon by ticking the box next to its name, for this example: Add Mesh: Add Tetrahedron. And that’s it! Congratulations, you’re now ready to start building your own addons for Blender-2.8!",
    "url": "http://localhost:4000/scripting_in_blender.html",
    "relUrl": "/scripting_in_blender.html"
  }
  
}
